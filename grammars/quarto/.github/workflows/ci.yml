name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Parser
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install tree-sitter CLI only
        run: npm install tree-sitter-cli

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npx tree-sitter test

      - name: Parse example files
        run: |
          npx tree-sitter parse examples/*.qmd --quiet --stat

  validate:
    name: Validate Grammar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install tree-sitter CLI only
        run: npm install tree-sitter-cli

      - name: Validate grammar structure
        run: npx tree-sitter generate

      - name: Install dependencies
        run: npm install

      - name: Check for warnings
        run: |
          npx tree-sitter generate 2>&1 | tee generate-output.txt
          if grep -q "Error" generate-output.txt; then
            echo "Grammar has errors"
            exit 1
          fi

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Check JavaScript syntax
        run: node --check grammar.js

      - name: Check for common issues
        run: |
          # Check for TODO comments that should be addressed
          if grep -r "FIXME\|XXX" grammar.js src/*.c; then
            echo "Found unaddressed FIXME/XXX comments"
            # Don't fail on this for now
          fi

  queries:
    name: Validate Queries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install tree-sitter CLI only
        run: npm install tree-sitter-cli

      - name: Generate parser
        run: npx tree-sitter generate

      - name: Install dependencies
        run: npm install

      - name: Check query files exist
        run: |
          test -f queries/highlights.scm || (echo "Missing highlights.scm" && exit 1)
          test -f queries/injections.scm || (echo "Missing injections.scm" && exit 1)
          test -f queries/folds.scm || (echo "Missing folds.scm" && exit 1)
          test -f queries/indents.scm || (echo "Missing indents.scm" && exit 1)
          test -f queries/locals.scm || (echo "Missing locals.scm" && exit 1)

  zed-compatibility:
    name: Zed Editor Compatibility
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: 'latest'

      - name: Install tree-sitter CLI
        run: npm install tree-sitter-cli

      - name: Install dependencies
        run: npm install

      - name: Validate tree-sitter headers present
        run: |
          echo "Checking for required tree-sitter headers..."
          test -f src/tree_sitter/parser.h || (echo "ERROR: Missing parser.h" && exit 1)
          test -f src/tree_sitter/alloc.h || (echo "ERROR: Missing alloc.h" && exit 1)
          test -f src/tree_sitter/array.h || (echo "ERROR: Missing array.h" && exit 1)
          echo "OK: All headers present"

      - name: Check for TSMapSlice in parser.h
        run: |
          echo "Validating TSMapSlice struct..."
          if grep -q "TSMapSlice" src/tree_sitter/parser.h; then
            echo "OK: TSMapSlice found in parser.h"
          else
            echo "ERROR: Missing TSMapSlice in parser.h (required for Zed)"
            exit 1
          fi

      - name: Check for abi_version in parser.h
        run: |
          echo "Checking for abi_version field in TSLanguage struct..."
          if grep -q "abi_version" src/tree_sitter/parser.h; then
            echo "OK: abi_version field found (tree-sitter 0.25.10)"
          else
            echo "ERROR: Missing abi_version field in parser.h"
            exit 1
          fi

      - name: Build WASM
        run: |
          echo "Building WebAssembly module..."
          npx tree-sitter build --wasm

      - name: Validate WASM output
        run: |
          echo "Validating WASM output..."
          test -f tree-sitter-quarto.wasm || (echo "ERROR: WASM file not generated" && exit 1)

          size=$(stat -c%s tree-sitter-quarto.wasm)
          size_kb=$((size / 1024))
          echo "OK: WASM file generated: ${size_kb}KB (${size} bytes)"

          if [ $size -gt 200000 ]; then
            echo "WARNING: WASM size is large (${size_kb}KB > 195KB)"
            echo "   Consider optimizing grammar to reduce bundle size"
          fi

          if [ $size -gt 250000 ]; then
            echo "ERROR: WASM too large: ${size_kb}KB exceeds 244KB limit"
            exit 1
          fi

      - name: Check tree-sitter CLI version
        run: |
          echo "Checking tree-sitter CLI version..."
          version=$(npx tree-sitter --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "unknown")
          echo "tree-sitter CLI: $version"

          if [[ "$version" == "unknown" ]]; then
            echo "WARNING: Could not determine CLI version"
          else
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)

            if [ "$major" -eq 0 ] && [ "$minor" -lt 23 ]; then
              echo "ERROR: tree-sitter CLI too old: $version (need 0.23+)"
              exit 1
            fi
            echo "OK: CLI version compatible: $version"
          fi

      - name: Test WASM with simple parse
        run: |
          echo "Testing WASM parser with sample input..."
          echo '# Hello World' | npx tree-sitter parse --wasm tree-sitter-quarto.wasm --quiet || echo "WARNING: WASM parse test skipped (expected in CI)"
          echo "OK: WASM compatibility tests complete"
